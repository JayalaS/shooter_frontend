/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.18 models/ball/ball.gltf 
*/

import React, { useEffect, useLayoutEffect, useRef, useState } from "react";
import { useSphereCollaider } from "../Collaiders/collaiders";
import { useCharacterAnimation } from "@/contexts/CharacterAnimation";

export const positions = {
  penalty: {
    position: [0.1, 0, 9],
  },
};

export const trayectories_force = {
  penalty: {
    left: {
      1: [-70, 0, -300],
      2: [-48, 60, -150],
      3: [-70, 70, -300],
    },
    right: {
      1: [70, 0, -300],
      2: [48, 60, -150],
      3: [70, 70, -300],
    },
    center: {
      1: [0, 0, -300],
      2: [-5, 70, -300],
      3: [5, 90, -300],
    },
  },
};

export function Ball(props) {
  const { position, animationTime, direction, force } = props;
  const { animationIndex } = useCharacterAnimation();

  const { sphereCollaider, sphereCollaiderAPI } = useSphereCollaider({
    scale: [0.15, 0.15, 0.15],
    args: [0.15],
    position: positions[position].position,
    rotation: [0, 0, 0],
    mass: 0.2,
    type: "Dynamic",
    material: {
      friction: 0.5,
      restitution: 0.1,
    },
    name: "ball",
    onCollide: (e) => {
      // console.log("ball collided", e.body);
    },
  });

  document.getElementById("restart").addEventListener("click", () => {
    // restart ball position
    sphereCollaiderAPI.velocity.set(0, 0, 0);
    sphereCollaiderAPI.angularVelocity.set(0, 0, 0);
    sphereCollaiderAPI.position.set(
      positions[position].position[0],
      positions[position].position[1],
      positions[position].position[2]
    );
  });

  const shoot = () => {
    const force_ = trayectories_force[position][direction][force];
    sphereCollaiderAPI.applyForce(force_, [0, 0, 0]);
  };

  useEffect(() => {
    switch (animationIndex) {
      case 1:
        setTimeout(() => {
          shoot();
        }, animationTime * 1000 - 700);
        break;
      default:
        break;
    }
  }, [animationIndex]);

  return (
    <group dispose={null}>
      <mesh ref={sphereCollaider}>
        <sphereGeometry args={[0.15, 10, 10]} />
        <meshStandardMaterial color={"#B0B0B0"} />
      </mesh>
    </group>
  );
}

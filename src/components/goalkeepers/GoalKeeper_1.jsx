/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.18 goalKeeper.gltf 
*/

import React, { useEffect, useRef, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useCharacterAnimation } from "@/contexts/CharacterAnimation";
import * as THREE from "three";
import { goal_keeper_positions } from "@/helpers/goalKeeperPositions.js";

export function Goalkeeper_1(props) {
  const { action, type, onActiveAnimation } = props;
  const group = useRef();
  const { nodes, materials, animations } = useGLTF(
    "models/goalKeeper/goalKeeper_1.gltf"
  );
  const { actions, names } = useAnimations(animations, group);
  const { animationIndex } = useCharacterAnimation();

  const [lastPosition, setLastPosition] = useState(new THREE.Vector3());

  // useEffect(() => {
  //   if (group.current) {
  //     group.current.action.copy(lastPosition);
  //   }
  // }, [lastPosition]);

  const handleStart = () => {
    console.log("start keeper");
    const animation = actions[
      goal_keeper_positions[type].idle.animation
    ].setLoop(THREE.LoopRepeat);
    console.log(animation);
    animation.reset();
    animation.play();
  };

  const handleKeep = () => {
    console.log("start to keeep", action, actions);
    const action = actions[action];
    action.reset();
    action.play();
    // action.clampWhenFinished = true;
    // action.onFinished = () => {
    //   if (group.current) {
    //     const finalPosition = group.current.action.clone();
    //     setLastPosition(finalPosition);
    //   }
    // };
  };

  useEffect(() => {
    if (Object.keys(actions).length > 0) {
      switch (animationIndex) {
        case 0:
          handleStart();
        case 1:
          setTimeout(() => {
            handleKeep();
          }, 500);
          // setTimeout(() => {
          //   const action = actions[names[1]];
          //   action.reset();
          //   action.play();
          // }, 2300);
          break;
        default:
          // onActiveAnimation({ time: actions[names[0]].getClip().duration });
          break;
      }
    }
  }, [animationIndex]);

  document.getElementById("restart").addEventListener("click", () => {
    const index = positions[action].animation;
    const action = actions[names[index]];
    const action2 = actions[names[1]];
    action2.stop();
    action.stop();
  });

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="idle" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.mixamorigHips} />
          <skinnedMesh
            name="brown_2__Body"
            geometry={nodes.brown_2__Body.geometry}
            material={materials.body1}
            skeleton={nodes.brown_2__Body.skeleton}
          />
          <skinnedMesh
            name="brown_2_Eyes"
            geometry={nodes.brown_2_Eyes.geometry}
            material={materials.Wolf3D_Eye3}
            skeleton={nodes.brown_2_Eyes.skeleton}
          />
          <skinnedMesh
            name="brown_2_hair"
            geometry={nodes.brown_2_hair.geometry}
            material={materials.Wolf3D_Hair1}
            skeleton={nodes.brown_2_hair.skeleton}
          />
          <skinnedMesh
            name="brown_2_Head"
            geometry={nodes.brown_2_Head.geometry}
            material={materials.head1}
            skeleton={nodes.brown_2_Head.skeleton}
          />
          <skinnedMesh
            name="brown_2_pants"
            geometry={nodes.brown_2_pants.geometry}
            material={materials.pantaloneta5}
            skeleton={nodes.brown_2_pants.skeleton}
          />
          <skinnedMesh
            name="brown_2_shirt"
            geometry={nodes.brown_2_shirt.geometry}
            material={materials.shirt6}
            skeleton={nodes.brown_2_shirt.skeleton}
          />
          <skinnedMesh
            name="brown_2_shoes"
            geometry={nodes.brown_2_shoes.geometry}
            material={materials.shoes5}
            skeleton={nodes.brown_2_shoes.skeleton}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("models/goalKeeper/goalKeeper_1.gltf");

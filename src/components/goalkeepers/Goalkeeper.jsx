/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 ../models/goalKeeper/goalKeeper.gltf 
*/

import React, { useEffect, useRef, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useCharacterAnimation } from "@/contexts/CharacterAnimation";
import * as THREE from "three";
import { useFrame } from "@react-three/fiber";

const positions = {
  penalty: {
    position: [0, 0, 0],
    retation: [Math.PI / 2, 0, 0],
    animation: 0,
  },
};

export function Goalkeeper(props) {
  const { position } = props;
  const group = useRef();
  const { nodes, materials, animations } = useGLTF(
    "./models/goalKeeper/goalKeeper.gltf"
  );
  const { actions, names } = useAnimations(animations, group);
  const { animationIndex } = useCharacterAnimation();

  const [lastPosition, setLastPosition] = useState(new THREE.Vector3());

  const mixer = useRef();
  useEffect(() => {
    if (group.current) {
      group.current.position.copy(lastPosition);
    }
  }, [lastPosition]);
  // useFrame((state, delta) => {
  //   if (mixer.current) {
  //     mixer.current.update(delta);
  //   }
  //   if (group.current) {
  //     const { x, y, z } = group.current.getWorldPosition(new THREE.Vector3());
  //    console.log(x, y, z);
  //   }
  // });

  const handleKick = () => {
    const index = positions[position].animation;
    const action = actions[names[index]].setLoop(THREE.LoopOnce);
    action.reset();
    action.play();
    action.clampWhenFinished = true;
    action.onFinished = () => {
      if (group.current) {
        const finalPosition = group.current.position.clone();
        setLastPosition(finalPosition);
      }
    };
  };
  useEffect(() => {
    switch (animationIndex) {
      case 1:
        // retrasarlo 0,5 segundos
        setTimeout(() => {
          handleKick();
        }, 500);
        break;
      default:
        break;
    }
  }, [animationIndex]);

  document.getElementById("restart").addEventListener("click", () => {
    // restart ball position
    const index = positions[position].animation;
    const action = actions[names[index]];
    action.stop();
  });

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.mixamorig5Hips} />
          <skinnedMesh
            castShadow
            name="Ch38_Body"
            geometry={nodes.Ch38_Body.geometry}
            material={materials.Ch38_body}
            skeleton={nodes.Ch38_Body.skeleton}
          />
          <skinnedMesh
            castShadow
            name="Ch38_Eyelashes"
            geometry={nodes.Ch38_Eyelashes.geometry}
            material={materials.Ch38_hair}
            skeleton={nodes.Ch38_Eyelashes.skeleton}
          />
          <skinnedMesh
            castShadow
            name="Ch38_Hair"
            geometry={nodes.Ch38_Hair.geometry}
            material={materials.Ch38_hair}
            skeleton={nodes.Ch38_Hair.skeleton}
          />
          <skinnedMesh
            castShadow
            name="Ch38_Shirt"
            geometry={nodes.Ch38_Shirt.geometry}
            material={materials.Ch38_body}
            skeleton={nodes.Ch38_Shirt.skeleton}
          />
          <skinnedMesh
            castShadow
            name="Ch38_Shoes"
            geometry={nodes.Ch38_Shoes.geometry}
            material={materials.Ch38_body}
            skeleton={nodes.Ch38_Shoes.skeleton}
          />
          <skinnedMesh
            castShadow
            name="Ch38_Shorts"
            geometry={nodes.Ch38_Shorts.geometry}
            material={materials.Ch38_body}
            skeleton={nodes.Ch38_Shorts.skeleton}
          />
          <skinnedMesh
            castShadow
            name="Ch38_Socks"
            geometry={nodes.Ch38_Socks.geometry}
            material={materials.Ch38_body}
            skeleton={nodes.Ch38_Socks.skeleton}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("./models/goalKeeper/goalKeeper.gltf");
